import h from '../components/helpers/h';
import C from './actionConstants';
import { fAuth, ref } from '../components/helpers/firebase';


export function watchFirebase(dispatch) {
  ref.on('value', (snap) => {
    dispatch(fetchConversationsFromFirebase());
    dispatch(fetchMessagesFromFirebase());
  });
}

// FIREBASE conversations
function fetchConversationsFromFirebase() {
  return function (dispatch) {
    var loggedUser = 'aZs5rISKcqWbed5rEyagbsIx5Ij2';
    var conversations = {}
    if (loggedUser !== null) {
      var userConversations = ref.child("users/" + loggedUser);
      userConversations.on('value', (userSnapshot) => {
        userSnapshot.child('conversations').forEach((conversationKey) => {
          var conversationRef = ref.child('conversations').child(conversationKey.key);
          conversationRef.on('value', (conversationsSnapshot) => {
            var conversation = conversationsSnapshot.val();
            conversations[conversationKey.key] = conversation;
            console.log("DISPATCH!!!!");
          });
        });
      });
    }
    dispatch({
      type: C.FETCH_CONVERSATIONS,
      conversations
    })
  }
}

// FIREBASE Messages
function fetchMessagesFromFirebase() {
  return function (dispatch) {
    var loggedUser = 'aZs5rISKcqWbed5rEyagbsIx5Ij2';
    var messages = {}
    if (loggedUser !== null) {
      var userConversations = ref.child("users/" + loggedUser);
      userConversations.on('value', (userSnapshot) => {
        userSnapshot.child('conversations').forEach((conversationKey) => {
          var messageRef = ref.child('messages').child(conversationKey.key);
          messageRef.on('value', (messagesSnapshot) => {
            var message = messagesSnapshot.val();
            messages[conversationKey.key] = message;
          });
        });
      });
    }
    dispatch({
      type: C.FETCH_MESSAGES,
      messages
    })
  }
}
// Runs whenever a new conversation 
// is created in the user database
export function addConversation(index) {
  return {
    type: C.ADD_CONVERSATION,
    index
  }
}
// runs when user clicks on a conversation and so it appears
// on the righ drawer.
export function toggleConversation(index) {
  return {
    type: C.TOGGLE_CONVERSATION,
    index
  }
}

// runs whenever user sends message inside chat
export function addMessage(conversationId, messageId, sender, content, typeOfContent, timestamp) {
  return {
    type: C.ADD_MESSAGE,
    conversationId,
    messageId,
    sender,
    content,
    typeOfContent,
    timestamp,
  }
}

// async action for sending to firebase messages
export function pushMessages(conversationId, sender, content, typeOfContent) {
  return function (dispatch) {
    var messageId = ref.push(); // we get an autogenerated id from firebase
    var updates = {}; // hold the updates 
    var timestamp = Date.now(); // now epoch time
    var message_data = {
      sender,
      content,
      typeOfContent,
      timestamp,
    }
    updates['/messages/' + conversationId + "/" + messageId.key] = message_data;
    ref.update(updates);
    // Now dispatching the pure function so we can modify render of components
    dispatch(addMessage(conversationId, messageId.key, sender, content, typeOfContent, timestamp));
  }
}

// Updates the conversation header of the sidebar.
export function updateConversationHeader(conversationId, lastMessage, timestamp) {
  return {
    type: C.UPDATE_CONVERSATION_HEADER,
    conversationId,
    lastMessage,
    timestamp

  }
}
// Async action 
export function pushConversation(conversationId, lastMessage, timestamp) {
  return function (dispatch) {
    // Sending Firebase Data.
    var update_conversation = {
      last_message: lastMessage,
      timestamp,
      sender: 'default'
    }
    var updates = {};
    updates['/conversations/' + conversationId] = update_conversation;
    ref.update(updates);
    // Dispatch new state to our React Components
    dispatch(updateConversationHeader(conversationId, lastMessage, timestamp));
  }
}


export function showContactsSidebar() {
  return {
    type: C.SHOW_CONTACTS_SIDEBAR,
  }
}

export function readParticipant() {
  return {
    type: C.READ_PARTICIPANT,
  }
}

export function startListeningToAuth() {
  return function (dispatch) {
    fAuth.auth().onAuthStateChanged((authData) => {
      if (authData) {
        dispatch({
          type: C.LOGIN_USER,
          uid: authData.uid
        });
      }
    });
  }
}

export function attemptLogin() {
  return function (dispatch) {
    dispatch({ type: C.ATTEMPTING_LOGIN });
    fAuth.signInWithCrdential((error, password) => {
      if (error) {
        dispatch({ type: C.LOGIN_ERROR, error: "Login failed! " + error });
      }
    })
  }
}

// because we are starting a new conversation first we need TODO: evaluate if there 
// is no current conversation between sender (loggedUser) and receiver. If not...
// then we can start a new one. Else, we need to fetch the conversation id.
export function startNewConversation(receiver) {
  return {
    type: C.START_NEW_CONVERSATION,
    sender: 'currentLoggedUser',
    receiver,
    conversationId: h.createRandomId(),
    messageId: h.createRandomId(),
    lastMessage: '',
    timestamp: '',
    typeOfContent: 'text',
  }
}

