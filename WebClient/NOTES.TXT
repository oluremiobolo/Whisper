

notes:

first instal via npm the firebase 
 npm install firebase --save

then because we need to serve via server and no local filesystem we use 
$ npm install -g firebase-tools
and then 
$ firebase serve



var playersRef = firebase.database().ref("players/");
playersRef.set({John:{number:1,age:30},Amanda:{number:2,age:20}});


var johnRef = firebase.database().ref("players/John");
johnRef.update({
   "number": 10
});

#####TO use an id say PUSH instead of update or set #######
First initialize the firebase 
    var playersRef=firebase.database().ref("players/");
then push
    playersRef.push({
    name: "Shelma",
    number: 10,
    age: 27
    });


Retrieve object, then change it:
var amandaRef = playersRef.child("-KcEpbmo75AWzmMg3Qvp").child("age");
amandaRef.transaction(
    function(currentAge){
        return currentAge+1;
        }
    );



Get firebase database ref
var ref = firebase.database().ref();

Retrieve the values of the ref
ref.on("value", function(snapshot){
    console.log(snapshot.val());
}, function (error) {
    console.log("Error: " + error.code);
});

Trigger when child is added to firebase
playersRef.on("child_added", function(data, prevChildKey) {
   var newPlayer = data.val();
   console.log("name: " + newPlayer.name);
   console.log("age: " + newPlayer.age);
   console.log("number: " + newPlayer.number);
   console.log("Previous Player: " + prevChildKey);
});



Trigger event when child changes inside firebase
var playersRef = firebase.database().ref("players/");

playersRef.on("child_changed", function(data) {
   var player = data.val();
   console.log("The updated player name is " + player.name);
});

Trigger when child is deleted

var playersRef = firebase.database().ref("players/");

playersRef.on("child_removed", function(data) {
   var deletedPlayer = data.val();
   console.log(deletedPlayer.name + " has been deleted");
});

##########################
Chapters retrieved from 
https://www.tutorialspoint.com/firebase/firebase_filtering_data.htm

This simple chapter will show you how to detach callbacks in Firebase.

Detach Callback for Event Type
Let's say we want to detach callback for a function with value event type.

Example
var playersRef = firebase.database().ref("players/");

ref.on("value", function(data) {
   console.log(data.val());
}, function (error) {
   console.log("Error: " + error.code);
});
We need to use off() method. This will remove all callbacks with value event type.

playersRef.off("value");
Detach All Callbacks
When we want to detach all callbacks, we can use −

playersRef.off();
###########################

Retrieve data from firebase in determined order:

playersRef.orderByChild("age").on("child_added", function(data) {
   console.log(data.val().name);
   console.log(data.val().age);
});


Order by key
var playersRef = firebase.database().ref("players/");

playersRef.orderByKey().on("child_added", function(data) {
   console.log(data.key);
});

Ordering data by another field on the database
¿How to connect them and update them accordingly?
var ratingRef = firebase.database().ref("ratings/");

ratingRef.orderByValue().on("value", function(data) {
   data.forEach(function(data) {
      console.log("The " + data.key + " rating is " + data.val());
   });
});


Read and Write
Next code snippet defined inside Firebase security rules will allow 
writing access to /users/'$uid'/ for authenticated user with the same uid, but everyone could read it.

Example
{
   "rules": {
      "users": {
         "$uid": {
            ".write": "$uid === auth.uid",
            ".read": true
         }
      }
   }
}

